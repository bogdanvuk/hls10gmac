#include <stdio.h>

#include "transmit.hpp"

int frm1[] = {
    0x00, 0x10, 0xa4, 0x7b, 0xea, 0x80, 0x00, 0x12,
    0x34, 0x56, 0x78, 0x90, 0x08, 0x00, 0x45, 0x00,
    0x00, 0x2e, 0xb3, 0xfe, 0x00, 0x00, 0x80, 0x11,
    0x05, 0x40, 0xc0, 0xa8, 0x00, 0x2c, 0xc0, 0xa8,
    0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x1a,
    0x2d, 0xe8, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
    0x0e, 0x0f, 0x10, 0x11};

int frm2[] = {
    0x00, 0x10, 0xa4, 0x7b, 0xea, 0x80, 0x00, 0x12,
    0x34, 0x56, 0x78, 0x90, 0x00, 0x2e, 0x45, 0x00,
    0x00, 0x2e, 0xb3, 0xfe, 0x00, 0x00, 0x80, 0x11,
    0x05, 0x40, 0xc0, 0xa8, 0x00, 0x2c, 0xc0, 0xa8,
    0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x1a,
    0x2d, 0xe8, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
    0x0e, 0x0f, 0x10, 0x11};

int frm3[] = {
    0x00, 0x10, 0xa4, 0x7b, 0xea, 0x80, 0x00, 0x12,
    0x34, 0x56, 0x78, 0x90, 0x00, 0x02, 0x45, 0x00,
};

int frm4[] = {
    0x00, 0x10, 0xa4, 0x7b, 0xea, 0x80, 0x00, 0x12,
    0x34, 0x56, 0x78, 0x90, 0x00, 0x02, 0x45, 0x00,
};

int frm_empty[] = {

};

typedef struct {
    int* data;
    int len;
}t_frame;

#define frm_inst(f) ((t_frame) {(f), sizeof(f) / sizeof(int)})

t_frame frames[] = {
    frm_inst(frm1),
//  frm_inst(frm_empty),
//  frm_inst(frm_empty),
    frm_inst(frm2),
    frm_inst(frm3),
    frm_inst(frm4)
};

#define FRAMES_CNT sizeof(frames) / sizeof(t_frame)
#define replace_byte(w, b, pos) ((w) & (~(0xffL << (pos)*8))) | ((((ap_uint<64>) b) & 0xff) << (pos)*8)

int main()
{
    int i;
    int j;
    int k;
    hls::stream<t_axis> m_axis;
    hls::stream<t_m_xgmii> m_xgmii;
    int correct_frames = 0;
    hls::stream<t_tx_status> tx_status_stream;

    for (j = 0; j < FRAMES_CNT; j++) {
    	i = 0;
    	int start_word = 0;
        while(i < frames[j].len){
        	t_axis word = (t_axis) {0x0000000000000000, 0x00, 0, 0};
            ap_uint<64> mask;
            for(k = 0; (k < 8) && (i < frames[j].len); k++){
                word.data = replace_byte(word.data, frames[j].data[i++], k);
                word.keep |= (1 << k);
            }

            if (i == frames[j].len) {
           		word.last = 1;
            }
            m_axis.write(word);
        }
    }

    transmit(m_axis, m_xgmii, tx_status_stream);

    while (!m_xgmii.empty()) {
        t_m_xgmii xgmii = m_xgmii.read();
        if ((xgmii.txd == 0xd5555555555555fb) && (xgmii.txc == 0x01)) {
            printf("***********************************************************************************\n");
            i = 0;
        } else if (xgmii.txc != 0xff) {
            printf("%02d: TXD 0x%016lx, TXC 0x%02x\n", i, xgmii.txd.to_long(), xgmii.txc.to_int());
            i++;
        }
    }

    while (!tx_status_stream.empty()){
    	t_tx_status tx_status = tx_status_stream.read();
    }

    return 0;
}
